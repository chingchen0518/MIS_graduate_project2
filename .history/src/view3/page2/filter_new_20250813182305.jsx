import React, { useState, useEffect } from 'react';
import './Filter.css';

const Filter = ({ onFilterChange }) => {
    const [isExpanded, setIsExpanded] = useState(false);
    const [categories, setCategories] = useState([]);
    const [cities, setCities] = useState([]);
    const [selectedCategories, setSelectedCategories] = useState([]);
    const [selectedCities, setSelectedCities] = useState([]);
    const [priceRange, setPriceRange] = useState([0, 1000]);
    const [expandedSections, setExpandedSections] = useState({
        category: false,
        city: false,
        price: false
    });

    // ËºâÂÖ•È°ûÂà•ÂíåÂüéÂ∏ÇË≥áÊñô
    useEffect(() => {
        // Áç≤ÂèñÊôØÈªûÈ°ûÂà•
        fetch('http://localhost:5000/api/attraction-categories')
            .then(response => response.json())
            .then(data => {
                setCategories(data);
            })
            .catch(error => {
                console.error('Áç≤ÂèñÊôØÈªûÈ°ûÂà•Â§±Êïó:', error);
            });

        // Áç≤ÂèñÂüéÂ∏ÇË≥áÊñô
        fetch('http://localhost:5000/api/attraction-cities')
            .then(response => response.json())
            .then(data => {
                setCities(data);
            })
            .catch(error => {
                console.error('Áç≤ÂèñÂüéÂ∏ÇË≥áÊñôÂ§±Êïó:', error);
            });
    }, []);

    // Áï∂ÁØ©ÈÅ∏Ê¢ù‰ª∂ÊîπËÆäÊôÇÈÄöÁü•Áà∂ÁµÑ‰ª∂
    useEffect(() => {
        const filterData = {
            categories: selectedCategories,
            cities: selectedCities,
            priceRange: priceRange
        };
        onFilterChange && onFilterChange(filterData);
    }, [selectedCategories, selectedCities, priceRange, onFilterChange]);

    // ËôïÁêÜÈ°ûÂà•ÈÅ∏Êìá
    const handleCategoryChange = (category) => {
        setSelectedCategories(prev => {
            const newSelected = prev.includes(category)
                ? prev.filter(c => c !== category)
                : [...prev, category];
            return newSelected;
        });
    };

    // ËôïÁêÜÂüéÂ∏ÇÈÅ∏Êìá
    const handleCityChange = (city) => {
        setSelectedCities(prev => {
            const newSelected = prev.includes(city)
                ? prev.filter(c => c !== city)
                : [...prev, city];
            return newSelected;
        });
    };

    // ËôïÁêÜÂÉπÊ†ºÁØÑÂúçËÆäÊõ¥
    const handlePriceChange = (e) => {
        const value = parseInt(e.target.value);
        setPriceRange([0, value]);
    };

    // ÂàáÊèõÂ±ïÈñãÁãÄÊÖã
    const toggleExpanded = () => {
        setIsExpanded(!isExpanded);
    };

    // ÂàáÊèõÂ≠êÂçÄÂ°äÂ±ïÈñãÁãÄÊÖã
    const toggleSection = (section) => {
        setExpandedSections(prev => ({
            ...prev,
            [section]: !prev[section]
        }));
    };

    // Ê∏ÖÈô§ÊâÄÊúâÁØ©ÈÅ∏
    const clearFilters = () => {
        setSelectedCategories([]);
        setSelectedCities([]);
        setPriceRange([0, 1000]);
    };

    return (
        <div className="filter-container">
            <div className="filter-header" onClick={toggleExpanded}>
                <span className="filter-icon">üîç</span>
                <span className="filter-title">ÁØ©ÈÅ∏:</span>
                <div className="filter-summary">
                    {selectedCategories.length > 0 && (
                        <span className="summary-item">È°ûÂà•: {selectedCategories.length}</span>
                    )}
                    {selectedCities.length > 0 && (
                        <span className="summary-item">ÂüéÂ∏Ç: {selectedCities.length}</span>
                    )}
                </div>
                <div className="price-range-display">
                    <span>üí∞</span>
                    <input
                        type="range"
                        min="0"
                        max="1000"
                        value={priceRange[1]}
                        onChange={handlePriceChange}
                        className="price-slider"
                    />
                    <span className="price-value">{priceRange[1]}</span>
                </div>
                <span className="expand-arrow">{isExpanded ? '‚ñ≤' : '‚ñº'}</span>
            </div>

            {isExpanded && (
                <div className="filter-content">
                    <div className="filter-actions">
                        <button className="clear-button" onClick={clearFilters}>
                            Ê∏ÖÈô§
                        </button>
                    </div>

                    {/* È°ûÂà•ÁØ©ÈÅ∏ */}
                    <div className="filter-section">
                        <div 
                            className="section-header" 
                            onClick={() => toggleSection('category')}
                        >
                            <span>È°ûÂà•</span>
                            <span className="section-arrow">
                                {expandedSections.category ? '‚ñ≤' : '‚ñº'}
                            </span>
                        </div>
                        {expandedSections.category && (
                            <div className="category-grid">
                                {categories.map(category => (
                                    <div
                                        key={category}
                                        className={`category-item ${selectedCategories.includes(category) ? 'selected' : ''}`}
                                        onClick={() => handleCategoryChange(category)}
                                    >
                                        {category}
                                    </div>
                                ))}
                            </div>
                        )}
                    </div>

                    {/* ÂüéÂ∏ÇÁØ©ÈÅ∏ */}
                    <div className="filter-section">
                        <div 
                            className="section-header" 
                            onClick={() => toggleSection('city')}
                        >
                            <span>ÂüéÂ∏Ç</span>
                            <span className="section-arrow">
                                {expandedSections.city ? '‚ñ≤' : '‚ñº'}
                            </span>
                        </div>
                        {expandedSections.city && (
                            <div className="city-grid">
                                {cities.map(city => (
                                    <div
                                        key={city}
                                        className={`city-item ${selectedCities.includes(city) ? 'selected' : ''}`}
                                        onClick={() => handleCityChange(city)}
                                    >
                                        {city}
                                    </div>
                                ))}
                            </div>
                        )}
                    </div>

                    {/* ÂÉπÊ†ºÁØÑÂúçÁØ©ÈÅ∏ */}
                    <div className="filter-section">
                        <div 
                            className="section-header" 
                            onClick={() => toggleSection('price')}
                        >
                            <span>È†êÁÆó</span>
                            <span className="section-arrow">
                                {expandedSections.price ? '‚ñ≤' : '‚ñº'}
                            </span>
                        </div>
                        {expandedSections.price && (
                            <div className="price-section">
                                <div className="price-range">
                                    <label>ÂÉπÊ†ºÁØÑÂúç: NT$ 0 - {priceRange[1]}</label>
                                    <input
                                        type="range"
                                        min="0"
                                        max="1000"
                                        value={priceRange[1]}
                                        onChange={handlePriceChange}
                                        className="price-range-slider"
                                    />
                                </div>
                            </div>
                        )}
                    </div>
                </div>
            )}
        </div>
    );
};

export default Filter;
